name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  snyk-security-scan:
    name: Snyk Dependency Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=backend/requirements.txt
        
    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif

  owasp-zap-scan:
    name: OWASP ZAP Dynamic Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Start test environment
      run: |
        cd quickstart
        docker-compose up -d
        sleep 30
        
    - name: Wait for application to be ready
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
        
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:8000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Run OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.8.0
      if: github.event_name == 'schedule'
      with:
        target: 'http://localhost:8000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Cleanup
      if: always()
      run: |
        cd quickstart
        docker-compose down -v

  trivy-security-scan:
    name: Trivy Container & Filesystem Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy container image scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'qes-platform/backend:latest'
        format: 'sarif'
        output: 'trivy-container.sarif'
        
    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-container.sarif'

  semgrep-scan:
    name: Semgrep Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/python
        generateSarif: "1"
        
    - name: Upload Semgrep results to GitHub Advanced Security Dashboard
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  gosec-scan:
    name: Gosec Security Scan (for future Go components)
    runs-on: ubuntu-latest
    if: false  # Enable when Go components are added
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
        
    - name: Upload Gosec results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [snyk-security-scan, owasp-zap-scan, trivy-security-scan, semgrep-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-report.md
        echo "**Date**: $(date)" >> security-report.md
        echo "**Commit**: ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Scan Results" >> security-report.md
        echo "- Snyk Dependency Scan: ${{ needs.snyk-security-scan.result }}" >> security-report.md
        echo "- OWASP ZAP Scan: ${{ needs.owasp-zap-scan.result }}" >> security-report.md
        echo "- Trivy Scan: ${{ needs.trivy-security-scan.result }}" >> security-report.md
        echo "- Semgrep Scan: ${{ needs.semgrep-scan.result }}" >> security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md