name: End-to-End Tests

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  CYPRESS_CACHE_FOLDER: ~/.cache/Cypress

jobs:
  e2e-api-tests:
    name: API End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qes_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tests/e2e/package-lock.json

    - name: Install E2E test dependencies
      run: |
        cd tests/e2e
        npm ci

    - name: Start Vault in dev mode
      run: |
        wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install vault
        vault server -dev -dev-root-token-id="dev-root-token" &
        sleep 5
        export VAULT_ADDR="http://127.0.0.1:8200"
        export VAULT_TOKEN="dev-root-token"
        # Initialize PKI
        vault secrets enable pki
        vault secrets tune -max-lease-ttl=8760h pki
        vault write pki/root/generate/internal common_name="QES Platform Test CA" ttl=8760h

    - name: Initialize test database
      run: |
        cd backend
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/qes_platform_test"
        python -m alembic upgrade head
        psql $DATABASE_URL -f ../quickstart/init-scripts/01-init-schemas.sql

    - name: Start API server
      run: |
        cd backend
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/qes_platform_test"
        export REDIS_URL="redis://localhost:6379/0"
        export VAULT_URL="http://127.0.0.1:8200"
        export VAULT_TOKEN="dev-root-token"
        export LOG_LEVEL="DEBUG"
        export ENVIRONMENT="test"
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Wait for API to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

    - name: Run API tests with Pytest
      run: |
        cd tests/e2e
        python -m pytest api/ -v --tb=short --maxfail=5 \
          --junitxml=../../test-results/e2e-api.xml \
          --cov=../../backend \
          --cov-report=xml:../../coverage/e2e-api.xml

    - name: Upload API test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-api-test-results
        path: test-results/e2e-api.xml

    - name: Upload API coverage
      uses: codecov/codecov-action@v3
      with:
        file: coverage/e2e-api.xml
        flags: e2e-api
        name: e2e-api-coverage

  e2e-ui-tests:
    name: UI End-to-End Tests with Cypress
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Start QES Platform with Docker Compose
      run: |
        cd quickstart
        cp .env.example .env
        docker-compose up -d
        
        # Wait for services to be ready
        timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
        timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tests/e2e/package-lock.json

    - name: Cache Cypress binary
      uses: actions/cache@v3
      with:
        path: ${{ env.CYPRESS_CACHE_FOLDER }}
        key: ${{ runner.os }}-cypress-${{ hashFiles('tests/e2e/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-cypress-

    - name: Install E2E dependencies
      run: |
        cd tests/e2e
        npm ci

    - name: Run Cypress tests
      uses: cypress-io/github-action@v5
      with:
        working-directory: tests/e2e
        install: false
        start: echo "Services already running"
        wait-on: 'http://localhost:3000, http://localhost:8000/health'
        wait-on-timeout: 120
        browser: chrome
        record: true
        parallel: true
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CYPRESS_BASE_URL: http://localhost:3000
        CYPRESS_API_URL: http://localhost:8000

    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: tests/e2e/cypress/screenshots

    - name: Upload Cypress videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: tests/e2e/cypress/videos

    - name: Collect container logs
      if: failure()
      run: |
        cd quickstart
        docker-compose logs > ../container-logs.txt

    - name: Upload container logs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: container-logs
        path: container-logs.txt

    - name: Cleanup
      if: always()
      run: |
        cd quickstart
        docker-compose down -v

  e2e-load-tests:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Start QES Platform
      run: |
        cd quickstart
        cp .env.example .env
        # Use production-like configuration
        echo "POSTGRES_MAX_CONNECTIONS=200" >> .env
        echo "REDIS_MAXMEMORY=256mb" >> .env
        docker-compose up -d
        timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'

    - name: Install K6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run load tests
      run: |
        cd tests/e2e/load
        k6 run --out json=results.json performance-test.js

    - name: Generate load test report
      run: |
        cd tests/e2e/load
        k6 run --out json=results.json --summary-export=summary.json performance-test.js || true
        
        # Generate HTML report
        python3 -c "
        import json
        import sys
        
        with open('summary.json') as f:
            data = json.load(f)
        
        print('## Load Test Results')
        print(f'**Duration**: {data.get(\"options\", {}).get(\"duration\", \"N/A\")}')
        print(f'**VUs**: {data.get(\"options\", {}).get(\"vus\", \"N/A\")}')
        print()
        
        metrics = data.get('metrics', {})
        for name, metric in metrics.items():
            if 'avg' in metric or 'p95' in metric:
                print(f'**{name}**: {metric}')
        " > load-test-report.md

    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results
        path: |
          tests/e2e/load/results.json
          tests/e2e/load/summary.json
          tests/e2e/load/load-test-report.md

  e2e-integration-tests:
    name: Provider Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    strategy:
      fail-fast: false
      matrix:
        provider: [freja-se, dtrust-de]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Set up mock provider services
      run: |
        cd tests/e2e/mocks
        python mock_${{ matrix.provider }}.py &
        sleep 5

    - name: Run provider integration tests
      run: |
        cd tests/e2e
        python -m pytest providers/test_${{ matrix.provider }}_integration.py -v \
          --tb=short \
          --junitxml=../../test-results/e2e-${{ matrix.provider }}.xml
      env:
        PROVIDER_${{ matrix.provider }}_TEST_MODE: "mock"

    - name: Upload provider test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-${{ matrix.provider }}-results
        path: test-results/e2e-${{ matrix.provider }}.xml

  e2e-security-tests:
    name: Security E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start QES Platform
      run: |
        cd quickstart
        cp .env.example .env
        docker-compose up -d
        timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'

    - name: Run OWASP ZAP security scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://localhost:8000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a -j'

    - name: Run API security tests
      run: |
        cd tests/e2e/security
        python -m pytest -v --tb=short \
          --junitxml=../../../test-results/e2e-security.xml

    - name: Upload security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-security-results
        path: test-results/e2e-security.xml

  e2e-report:
    name: Generate E2E Test Report
    runs-on: ubuntu-latest
    needs: [e2e-api-tests, e2e-ui-tests, e2e-load-tests, e2e-integration-tests, e2e-security-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all test artifacts
      uses: actions/download-artifact@v5

    - name: Generate comprehensive test report
      run: |
        python3 -c "
        import os
        import json
        import xml.etree.ElementTree as ET
        from datetime import datetime
        
        def parse_junit_xml(file_path):
            if not os.path.exists(file_path):
                return None
            tree = ET.parse(file_path)
            root = tree.getroot()
            return {
                'tests': int(root.get('tests', 0)),
                'failures': int(root.get('failures', 0)),
                'errors': int(root.get('errors', 0)),
                'time': float(root.get('time', 0))
            }
        
        # Generate report
        report = ['# QES Platform E2E Test Report']
        report.append(f'**Generated**: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S UTC\")}')
        report.append(f'**Commit**: ${{ github.sha }}')
        report.append('')
        
        # API Tests
        api_results = parse_junit_xml('e2e-api-test-results/e2e-api.xml')
        if api_results:
            report.append('## API Tests')
            report.append(f'- **Tests**: {api_results[\"tests\"]}')
            report.append(f'- **Failures**: {api_results[\"failures\"]}') 
            report.append(f'- **Errors**: {api_results[\"errors\"]}')
            report.append(f'- **Duration**: {api_results[\"time\"]:.2f}s')
            report.append('')
        
        # Security Tests
        security_results = parse_junit_xml('e2e-security-results/e2e-security.xml')
        if security_results:
            report.append('## Security Tests')
            report.append(f'- **Tests**: {security_results[\"tests\"]}')
            report.append(f'- **Failures**: {security_results[\"failures\"]}')
            report.append(f'- **Errors**: {security_results[\"errors\"]}')
            report.append('')
        
        # Load Tests
        if os.path.exists('load-test-results/load-test-report.md'):
            with open('load-test-results/load-test-report.md') as f:
                report.append(f.read())
        
        with open('e2e-test-report.md', 'w') as f:
            f.write('\\n'.join(report))
        "

    - name: Upload comprehensive test report
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-report
        path: e2e-test-report.md

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('e2e-test-report.md')) {
            const report = fs.readFileSync('e2e-test-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          }